# Generated from ./Drolta.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,285,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,
        28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,5,31,199,8,31,10,31,12,
        31,202,9,31,1,32,1,32,5,32,206,8,32,10,32,12,32,209,9,32,1,33,3,
        33,212,8,33,1,33,1,33,5,33,216,8,33,10,33,12,33,219,9,33,1,34,3,
        34,222,8,34,1,34,5,34,225,8,34,10,34,12,34,228,9,34,1,34,1,34,5,
        34,232,8,34,10,34,12,34,235,9,34,1,34,1,34,1,35,1,35,1,35,1,35,5,
        35,243,8,35,10,35,12,35,246,9,35,1,35,1,35,1,36,1,36,1,36,1,36,5,
        36,254,8,36,10,36,12,36,257,9,36,1,36,3,36,260,8,36,1,36,1,36,3,
        36,264,8,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,272,8,37,10,37,12,
        37,275,9,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,273,0,
        39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,1,0,8,4,0,65,90,95,95,97,122,127,65535,
        5,0,48,57,65,90,95,95,97,122,127,65535,2,0,43,43,45,45,1,0,49,57,
        1,0,48,57,1,0,34,34,2,0,10,10,13,13,3,0,9,11,13,13,32,32,297,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,84,1,0,
        0,0,5,89,1,0,0,0,7,95,1,0,0,0,9,97,1,0,0,0,11,99,1,0,0,0,13,101,
        1,0,0,0,15,103,1,0,0,0,17,105,1,0,0,0,19,107,1,0,0,0,21,110,1,0,
        0,0,23,112,1,0,0,0,25,117,1,0,0,0,27,123,1,0,0,0,29,126,1,0,0,0,
        31,130,1,0,0,0,33,134,1,0,0,0,35,140,1,0,0,0,37,143,1,0,0,0,39,146,
        1,0,0,0,41,152,1,0,0,0,43,158,1,0,0,0,45,164,1,0,0,0,47,171,1,0,
        0,0,49,177,1,0,0,0,51,180,1,0,0,0,53,182,1,0,0,0,55,185,1,0,0,0,
        57,188,1,0,0,0,59,190,1,0,0,0,61,193,1,0,0,0,63,195,1,0,0,0,65,203,
        1,0,0,0,67,211,1,0,0,0,69,221,1,0,0,0,71,238,1,0,0,0,73,249,1,0,
        0,0,75,267,1,0,0,0,77,281,1,0,0,0,79,80,5,78,0,0,80,81,5,85,0,0,
        81,82,5,76,0,0,82,83,5,76,0,0,83,2,1,0,0,0,84,85,5,84,0,0,85,86,
        5,82,0,0,86,87,5,85,0,0,87,88,5,69,0,0,88,4,1,0,0,0,89,90,5,70,0,
        0,90,91,5,65,0,0,91,92,5,76,0,0,92,93,5,83,0,0,93,94,5,69,0,0,94,
        6,1,0,0,0,95,96,5,59,0,0,96,8,1,0,0,0,97,98,5,46,0,0,98,10,1,0,0,
        0,99,100,5,40,0,0,100,12,1,0,0,0,101,102,5,41,0,0,102,14,1,0,0,0,
        103,104,5,91,0,0,104,16,1,0,0,0,105,106,5,93,0,0,106,18,1,0,0,0,
        107,108,5,58,0,0,108,109,5,58,0,0,109,20,1,0,0,0,110,111,5,44,0,
        0,111,22,1,0,0,0,112,113,5,70,0,0,113,114,5,73,0,0,114,115,5,78,
        0,0,115,116,5,68,0,0,116,24,1,0,0,0,117,118,5,87,0,0,118,119,5,72,
        0,0,119,120,5,69,0,0,120,121,5,82,0,0,121,122,5,69,0,0,122,26,1,
        0,0,0,123,124,5,79,0,0,124,125,5,82,0,0,125,28,1,0,0,0,126,127,5,
        65,0,0,127,128,5,78,0,0,128,129,5,68,0,0,129,30,1,0,0,0,130,131,
        5,78,0,0,131,132,5,79,0,0,132,133,5,84,0,0,133,32,1,0,0,0,134,135,
        5,76,0,0,135,136,5,73,0,0,136,137,5,77,0,0,137,138,5,73,0,0,138,
        139,5,84,0,0,139,34,1,0,0,0,140,141,5,66,0,0,141,142,5,89,0,0,142,
        36,1,0,0,0,143,144,5,73,0,0,144,145,5,78,0,0,145,38,1,0,0,0,146,
        147,5,79,0,0,147,148,5,82,0,0,148,149,5,68,0,0,149,150,5,69,0,0,
        150,151,5,82,0,0,151,40,1,0,0,0,152,153,5,71,0,0,153,154,5,82,0,
        0,154,155,5,79,0,0,155,156,5,85,0,0,156,157,5,80,0,0,157,42,1,0,
        0,0,158,159,5,85,0,0,159,160,5,83,0,0,160,161,5,73,0,0,161,162,5,
        78,0,0,162,163,5,71,0,0,163,44,1,0,0,0,164,165,5,68,0,0,165,166,
        5,69,0,0,166,167,5,70,0,0,167,168,5,73,0,0,168,169,5,78,0,0,169,
        170,5,69,0,0,170,46,1,0,0,0,171,172,5,65,0,0,172,173,5,76,0,0,173,
        174,5,73,0,0,174,175,5,65,0,0,175,176,5,83,0,0,176,48,1,0,0,0,177,
        178,5,65,0,0,178,179,5,83,0,0,179,50,1,0,0,0,180,181,5,61,0,0,181,
        52,1,0,0,0,182,183,5,33,0,0,183,184,5,61,0,0,184,54,1,0,0,0,185,
        186,5,60,0,0,186,187,5,61,0,0,187,56,1,0,0,0,188,189,5,60,0,0,189,
        58,1,0,0,0,190,191,5,62,0,0,191,192,5,61,0,0,192,60,1,0,0,0,193,
        194,5,62,0,0,194,62,1,0,0,0,195,196,5,63,0,0,196,200,7,0,0,0,197,
        199,7,1,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,
        201,1,0,0,0,201,64,1,0,0,0,202,200,1,0,0,0,203,207,7,0,0,0,204,206,
        7,1,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,
        1,0,0,0,208,66,1,0,0,0,209,207,1,0,0,0,210,212,7,2,0,0,211,210,1,
        0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,217,7,3,0,0,214,216,7,
        4,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,
        0,0,0,218,68,1,0,0,0,219,217,1,0,0,0,220,222,7,2,0,0,221,220,1,0,
        0,0,221,222,1,0,0,0,222,226,1,0,0,0,223,225,7,4,0,0,224,223,1,0,
        0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,
        0,0,228,226,1,0,0,0,229,233,5,46,0,0,230,232,7,4,0,0,231,230,1,0,
        0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,
        0,0,235,233,1,0,0,0,236,237,7,3,0,0,237,70,1,0,0,0,238,244,5,34,
        0,0,239,240,5,92,0,0,240,243,5,34,0,0,241,243,8,5,0,0,242,239,1,
        0,0,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,
        0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,5,34,0,0,248,72,1,
        0,0,0,249,250,5,45,0,0,250,251,5,45,0,0,251,255,1,0,0,0,252,254,
        8,6,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,
        1,0,0,0,256,263,1,0,0,0,257,255,1,0,0,0,258,260,5,13,0,0,259,258,
        1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,264,5,10,0,0,262,264,
        5,0,0,1,263,259,1,0,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,266,
        6,36,0,0,266,74,1,0,0,0,267,268,5,47,0,0,268,269,5,42,0,0,269,273,
        1,0,0,0,270,272,9,0,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,274,
        1,0,0,0,273,271,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,
        5,42,0,0,277,278,5,47,0,0,278,279,1,0,0,0,279,280,6,37,0,0,280,76,
        1,0,0,0,281,282,7,7,0,0,282,283,1,0,0,0,283,284,6,38,0,0,284,78,
        1,0,0,0,14,0,200,207,211,217,221,226,233,242,244,255,259,263,273,
        1,0,1,0
    ]

class DroltaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    S_COL = 4
    DOT = 5
    OPEN_PAR = 6
    CLOSE_PAR = 7
    BRACKET_L = 8
    BRACKET_R = 9
    DBL_COL = 10
    COMMA = 11
    FIND = 12
    WHERE = 13
    OR = 14
    AND = 15
    NOT = 16
    LIMIT = 17
    BY = 18
    IN = 19
    ORDER = 20
    GROUP = 21
    USING = 22
    DEFINE = 23
    ALIAS = 24
    AS = 25
    EQ = 26
    NEQ = 27
    LTE = 28
    LT = 29
    GTE = 30
    GT = 31
    VARIABLE = 32
    IDENTIFIER = 33
    INT_LITERAL = 34
    FLOAT_LITERAL = 35
    STRING_LITERAL = 36
    SINGLE_LINE_COMMENT = 37
    MULTILINE_COMMENT = 38
    WHITESPACE = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'NULL'", "'TRUE'", "'FALSE'", "';'", "'.'", "'('", "')'", "'['", 
            "']'", "'::'", "','", "'FIND'", "'WHERE'", "'OR'", "'AND'", 
            "'NOT'", "'LIMIT'", "'BY'", "'IN'", "'ORDER'", "'GROUP'", "'USING'", 
            "'DEFINE'", "'ALIAS'", "'AS'", "'='", "'!='", "'<='", "'<'", 
            "'>='", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "S_COL", "DOT", "OPEN_PAR", "CLOSE_PAR", "BRACKET_L", "BRACKET_R", 
            "DBL_COL", "COMMA", "FIND", "WHERE", "OR", "AND", "NOT", "LIMIT", 
            "BY", "IN", "ORDER", "GROUP", "USING", "DEFINE", "ALIAS", "AS", 
            "EQ", "NEQ", "LTE", "LT", "GTE", "GT", "VARIABLE", "IDENTIFIER", 
            "INT_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", "SINGLE_LINE_COMMENT", 
            "MULTILINE_COMMENT", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "S_COL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                  "BRACKET_L", "BRACKET_R", "DBL_COL", "COMMA", "FIND", 
                  "WHERE", "OR", "AND", "NOT", "LIMIT", "BY", "IN", "ORDER", 
                  "GROUP", "USING", "DEFINE", "ALIAS", "AS", "EQ", "NEQ", 
                  "LTE", "LT", "GTE", "GT", "VARIABLE", "IDENTIFIER", "INT_LITERAL", 
                  "FLOAT_LITERAL", "STRING_LITERAL", "SINGLE_LINE_COMMENT", 
                  "MULTILINE_COMMENT", "WHITESPACE" ]

    grammarFileName = "Drolta.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


